
Summary

Java Set sınıfları, benzersiz (tekrarsız) elemanları içeren bir koleksiyon türüdür.
Set’ler, aynı elemanı birden fazla kez saklamaz ve genellikle elemanların sırası önemli değildir.
Bu özellikleri nedeniyle Set’ler, birçok farklı senaryoda kullanışlıdır.

Java’da Set arayüzünün en çok kullanılan 3 temel uygulaması vardır: HashSet, TreeSet ve LinkedHashSet.

1. HashSet
- Elemanları herhangi bir sırayla depolar (sıra garantisi yoktur).
- En hızlı ekleme/silme/arama işlemlerine sahiptir.
- null değerine izin verir.
- Performans: Ortalama O(1) ekleme, silme ve arama.
- Ne zaman kullanılır? → Sıra önemli değil, hız önemliyse.

2. TreeSet
- Elemanları doğal sıralama ya da verilen bir Comparator ile saklar.
- NavigableSet ve SortedSet arayüzlerini uygular.
- null değerine izin vermez.
- Performans: Ortalama O(log n) ekleme, silme ve arama.
- Ne zaman kullanılır? → Elemanların sıralı olması gerekiyorsa.

3. LinkedHashSet
- Elemanları eklendikleri sıraya göre depolar.
- HashSet’e göre biraz yavaştır ama TreeSet’ten hızlıdır.
- Performans: Ortalama O(1) ekleme, silme ve arama.
- Ne zaman kullanılır? → Ekleme sırası korunmalı ama sıralama şart değilse.

Sık Kullanılan Metotlar
- add(element) → Eleman ekler.
- remove(element) → Eleman siler.
- contains(element) → Eleman set içinde mi kontrol eder.
- size() → Eleman sayısını döndürür.
- isEmpty() → Set boş mu kontrol eder.

Set İşlemleri
Set’ler matematiksel küme işlemlerini destekler:
- Birleştirme (Union): addAll()
- Kesişim (Intersection): retainAll()
- Fark (Difference): removeAll()

Örnek
Set<Integer> set1 = new HashSet<>();
set1.add(1);
set1.add(2);
set1.add(3);

Set<Integer> set2 = new HashSet<>();
set2.add(2);
set2.add(3);
set2.add(4);

// Kesişim
set1.retainAll(set2);
System.out.println(set1); // [2, 3]

